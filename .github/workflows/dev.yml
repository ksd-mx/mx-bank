name: CI/CD pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy-to-aws:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE }}
        role-session-name: terraform-github
        role-duration-seconds: 1200
        mask-aws-account-id: 'no'

    - name: Install Terragrunt
      run: |
        TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .tag_name)
        wget https://github.com/gruntwork-io/terragrunt/releases/download/$TERRAGRUNT_VERSION/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: Apply Terraform scripts
      id: terragrunt
      run: |
        cd deploy/tf/envs/$(echo $ENVIRONMENT | tr '[:upper:]' '[:lower:]')
        terragrunt run-all apply  --terragrunt-non-interactive
        outputs=$(terragrunt run-all output -json 2>/dev/null | tr -d '\n')
        ECR_REPOSITORY=$(echo "$outputs" | jq -r '.repository_url.value // empty') 
        EKS_CLUSTER_NAME=$(echo "$outputs" | jq -r '.eks_cluster_name.value // empty')
        EKS_CLUSTER_ARN=$(echo "$outputs" | jq -r '.eks_cluster_arn.value // empty')
        echo "ECR_REPOSITORY=${ECR_REPOSITORY}" >> $GITHUB_OUTPUT
        echo "EKS_CLUSTER_NAME=${EKS_CLUSTER_NAME}" >> $GITHUB_OUTPUT
        echo "::set-output name=ECR_REPOSITORY::$ECR_REPOSITORY"
        echo "::set-output name=EKS_CLUSTER_NAME::$EKS_CLUSTER_NAME"
        echo "::set-output name=EKS_CLUSTER_ARN::$EKS_CLUSTER_ARN"

    - name: Install and configure AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

    - name: Get kubeconfig from EKS cluster
      run: |
        EKS_CLUSTER_NAME=${{ steps.terragrunt.outputs.EKS_CLUSTER_NAME }}
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME --kubeconfig ~/.kube/config

    - name: Upload kubeconfig
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: ~/.kube/config

    - name: Upload k8s templates
      uses: actions/upload-artifact@v2
      with:
        name: k8s-templates
        path: deploy/k8s/templates/

    outputs:
      EKS_CLUSTER_ARN: ${{ steps.terragrunt.outputs.EKS_CLUSTER_ARN }}
      EKS_CLUSTER_NAME: ${{ steps.terragrunt.outputs.EKS_CLUSTER_NAME }}
      ECR_REPOSITORY: ${{ steps.terragrunt.outputs.ECR_REPOSITORY }}

  build-and-push:
    needs: deploy-to-aws
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE }}
        role-session-name: terraform-github
        role-duration-seconds: 1200
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-and-push
      env:
        IMAGE_TAG: ${{ github.sha }} 
      run: |
        ECR_REPOSITORY=${{ needs.deploy-to-aws.outputs.ECR_REPOSITORY }}
        docker build -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:latest $ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=IMAGE::$ECR_REPOSITORY:$IMAGE_TAG"

    outputs:
      EKS_CLUSTER_ARN: ${{ needs.deploy-to-aws.outputs.EKS_CLUSTER_ARN }}
      EKS_CLUSTER_NAME: ${{ needs.deploy-to-aws.outputs.EKS_CLUSTER_NAME }}
      IMAGE: ${{ steps.build-and-push.outputs.IMAGE }}

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE }}
        role-session-name: terraform-github
        role-duration-seconds: 1200
        mask-aws-account-id: 'no'

    - name: Download kubeconfig
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
        path: ~/.kube/

    - name: Download k8s templates
      uses: actions/download-artifact@v2
      with:
        name: k8s-templates
        path: deploy/k8s/templates/

    - name: Install Kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Deploy to Kubernetes
      run: |
        kubectl config use-context ${{ needs.build-and-push.outputs.EKS_CLUSTER_ARN }}
        kubectl apply -f deploy/k8s/templates/
        kubectl set image deployment/hello-world hello-world=${{ needs.build-and-push.outputs.IMAGE }} -n mx-bank-service