name: CI/CD pipeline

on:
  push:
    branches: [ main ]

jobs:
  deploy-to-aws:
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE }}
        role-session-name: terraform-github
        role-duration-seconds: 1200

    - name: Install Terragrunt
      run: |
        TERRAGRUNT_VERSION=$(curl -s https://api.github.com/repos/gruntwork-io/terragrunt/releases/latest | jq -r .tag_name)
        wget https://github.com/gruntwork-io/terragrunt/releases/download/$TERRAGRUNT_VERSION/terragrunt_linux_amd64
        chmod +x terragrunt_linux_amd64
        sudo mv terragrunt_linux_amd64 /usr/local/bin/terragrunt

    - name: Apply Terraform scripts
      id: terragrunt
      run: |
        cd deploy/tf/envs/$(echo $ENVIRONMENT | tr '[:upper:]' '[:lower:]')
        terragrunt run-all apply  --terragrunt-non-interactive
        outputs=$(terragrunt run-all output -json 2>/dev/null | tr -d '\n')
        echo "$outputs"
        ecr_repository=$(echo "$outputs" | jq -r '.repository_url.value // empty')
        eks_name=$(echo "$outputs" | jq -r '.eks_name.value // empty')
        echo "::set-output name=ecr_repository::$repository_url"
        echo "::set-output name=eks_name::$eks_name"
        echo $ecr_repository
        echo $eks_name

    - name: Install and configure AWS CLI
      run: |
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

    - name: Get kubeconfig from EKS cluster
      run: |
        eks_name=${{ jobs.deploy-to-aws.terragrunt.eks_name }}
        echo $eks_name
        aws eks update-kubeconfig --region $AWS_REGION --name $eks_name --kubeconfig ~/.kube/config

    - name: Upload kubeconfig
      uses: actions/upload-artifact@v2
      with:
        name: kubeconfig
        path: ~/.kube/config

  build-and-push:
    needs: deploy-to-aws
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ secrets.ROLE }}
        role-session-name: terraform-github
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        IMAGE_TAG: ${{ github.sha }} 
      run: |
        ECR_REPOSITORY=${{ needs.deploy-to-aws.outputs.ecr_repository }}
        docker build -t $ECR_REPOSITORY:latest .
        docker tag $ECR_REPOSITORY:latest $ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REPOSITORY:latest
        docker push $ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-eks:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: DEV

    steps:
    - name: Download kubeconfig
      uses: actions/download-artifact@v2
      with:
        name: kubeconfig
        path: ~/.kube/

    - name: Install Kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/

    - name: Deploy to Kubernetes
      run: |
        kubectl config use-context ${{ needs.deploy-to-aws.outputs.eks_name }}
        kubectl set image hello-world mx-bank-service=${{ needs.build-and-push.outputs.image }}